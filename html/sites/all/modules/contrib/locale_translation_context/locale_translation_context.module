<?php
/**
 * @file
 * Main code for module Locale Context.
 */

/**
 * Implements hook_menu_alter().
 */
function locale_translation_context_menu_alter(&$items) {
  $items['admin/config/regional/translate/translate']['page callback'] = 'locale_translation_context_locale_translate_seek_screen';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function locale_translation_context_form_locale_translation_filter_form_alter(&$form, &$form_state) {
  // Get all contexts.
  $contexts = array();
  $result = db_select('locales_source', 'ls')
    ->fields('ls', array('context'))
    ->condition('ls.context', '', '<>')
    ->distinct()
    ->orderBy('ls.context')
    ->execute();

  while ($record = $result->fetchAssoc()) {
    $contexts[$record['context']] = $record['context'];
  }

  $form['filters']['status']['context'] = array(
    '#title' => t('Context'),
    '#type' => 'select',
    '#empty_value' => 'all',
    '#empty_option' => t('All contexts'),
    '#size' => 0,
    '#options' => $contexts,
  );

  if (!empty($_SESSION['locale_translation_filter']['context'])) {
    $form['filters']['status']['context']['#default_value'] = $_SESSION['locale_translation_filter']['context'];
  }

  // Attach css for new form field.
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'locale_translation_context') . '/theme/css/locale-translation-context.css',
  );

  // Override submit function to use our own.
  $form['#submit'] = array('locale_translation_context_locale_translation_filter_form_submit');
}

/**
 * Process result from locale translation filter form.
 *
 * Rewrites locale_translation_filter_form_submit().
 */
function locale_translation_context_locale_translation_filter_form_submit($form, &$form_state) {
  $op = $form_state['values']['op'];
  $filters = locale_translation_filters();
  $filters['context'] = t('Context');
  switch ($op) {
    case t('Filter'):
      foreach ($filters as $name => $filter) {
        if (isset($form_state['values'][$name])) {
          $_SESSION['locale_translation_filter'][$name] = $form_state['values'][$name];
        }
      }
      break;

    case t('Reset'):
      $_SESSION['locale_translation_filter'] = array();
      break;
  }

  $form_state['redirect'] = 'admin/config/regional/translate/translate';
}

/**
 * String search screen.
 *
 * Rewrites locale_translate_seek_screen().
 */
function locale_translation_context_locale_translate_seek_screen() {
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');

  $elements = drupal_get_form('locale_translation_filter_form');
  $output = drupal_render($elements);
  $output .= locale_translation_context_locale_translate_seek();
  return $output;
}

/**
 * Perform a string search and display results in a table.
 *
 * Rewrites _locale_translate_seek().
 */
function locale_translation_context_locale_translate_seek() {
  $output = '';

  // We have at least one criterion to match.
  if (!($query = locale_translation_context_locale_translate_seek_query())) {
    $query = array(
      'translation' => 'all',
      'group' => 'all',
      'language' => 'all',
      'string' => '',
      'context' => 'all',
    );
  }

  $sql_query = db_select('locales_source', 's');

  $limit_language = NULL;
  if ($query['language'] != 'en' && $query['language'] != 'all') {
    $sql_query->leftJoin('locales_target', 't', "t.lid = s.lid AND t.language = :langcode", array(':langcode' => $query['language']));
    $limit_language = $query['language'];
  }
  else {
    $sql_query->leftJoin('locales_target', 't', 't.lid = s.lid');
  }

  $sql_query->fields('s', array(
    'source',
    'location',
    'context',
    'lid',
    'textgroup',
  ));
  $sql_query->fields('t', array('translation', 'language'));

  // Compute LIKE section.
  switch ($query['translation']) {
    case 'translated':
      $sql_query->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE');
      $sql_query->orderBy('t.translation', 'DESC');
      break;

    case 'untranslated':
      $sql_query->condition(db_and()
        ->condition('s.source', '%' . db_like($query['string']) . '%', 'LIKE')
        ->isNull('t.translation')
      );
      $sql_query->orderBy('s.source');
      break;

    case 'all':
    default:
      $condition = db_or()
        ->condition('s.source', '%' . db_like($query['string']) . '%', 'LIKE');
      if ($query['language'] != 'en') {
        // Only search in translations if the language is not forced to English.
        $condition->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE');
      }
      $sql_query->condition($condition);
      break;
  }

  // Add a condition on the text group.
  if (!empty($query['group']) && $query['group'] != 'all') {
    $sql_query->condition('s.textgroup', $query['group']);
  }

  // Add a condition on the context.
  if (!empty($query['context']) && $query['context'] != 'all') {
    $sql_query->condition('s.context', $query['context']);
  }

  $sql_query = $sql_query->extend('PagerDefault')->limit(50);
  $locales = $sql_query->execute();

  $groups = module_invoke_all('locale', 'groups');
  $header = array(
    t('Text group'),
    t('String'),
    t('Context'),
    ($limit_language) ? t('Language') : t('Languages'),
    array('data' => t('Operations'), 'colspan' => '2'),
  );

  $strings = array();
  foreach ($locales as $locale) {
    if (!isset($strings[$locale->lid])) {
      $strings[$locale->lid] = array(
        'group' => $locale->textgroup,
        'languages' => array(),
        'location' => $locale->location,
        'source' => $locale->source,
        'context' => $locale->context,
      );
    }
    if (isset($locale->language)) {
      $strings[$locale->lid]['languages'][$locale->language] = $locale->translation;
    }
  }

  $rows = array();
  foreach ($strings as $lid => $string) {
    $rows[] = array(
      $groups[$string['group']],
      array(
        'data' => check_plain(truncate_utf8($string['source'], 150, FALSE, TRUE)) . '<br /><small>' . $string['location'] . '</small>',
      ),
      $string['context'],
      array(
        'data' => _locale_translate_language_list($string, $limit_language),
        'align' => 'center',
      ),
      array(
        'data' => l(t('edit'), "admin/config/regional/translate/edit/$lid", array('query' => drupal_get_destination())),
        'class' => array('nowrap'),
      ),
      array(
        'data' => l(t('delete'), "admin/config/regional/translate/delete/$lid", array('query' => drupal_get_destination())),
        'class' => array('nowrap'),
      ),
    );
  }

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No strings available.'),
  ));
  $output .= theme('pager');

  return $output;
}

/**
 * Build array out of search criteria specified in request variables.
 *
 * Rewrites _locale_translate_seek_query().
 */
function locale_translation_context_locale_translate_seek_query() {
  $query = &drupal_static(__FUNCTION__);
  if (!isset($query)) {
    $query = array();
    $fields = array('string', 'language', 'translation', 'group', 'context');
    foreach ($fields as $field) {
      if (isset($_SESSION['locale_translation_filter'][$field])) {
        $query[$field] = $_SESSION['locale_translation_filter'][$field];
      }
    }
  }

  return $query;
}

/**
 * Implements hook_help().
 */
function locale_translation_context_help($path, $arg) {
  switch ($path) {
    case 'admin/help#locale_translation_context':
      // Return a line-break version of the module README.txt.
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}
