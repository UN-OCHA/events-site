<?php
/**
 * @file
 * Drupal hooks for events_config.
 */

include_once 'events_config.features.inc';

/**
 * Implements hook_menu().
 */
function events_config_menu() {
  $items['login'] = array(
    'title' => 'Log in',
    'page callback' => 'events_config_login_redirect',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Redirect to hybrid auth.
 */
function events_config_login_redirect() {
  drupal_goto('hybridauth/window/HumanitarianId', array(
    'destination' => drupal_get_destination(),
    'destination_error' => 'events',
  ));
}

/**
 * Implements hook_hybridauth_user_login().
 */
function events_config_hybridauth_user_login($account, $data) {
  $needs_update = FALSE;
  $user_data = array();

  if (isset($data['locale'])) {
    if (in_array($data['locale'], array('en', 'fr', 'es'))) {
      if ($account->language != $data['locale']) {
        $account->language = $data['locale'];
        $needs_update = TRUE;
      }
    }
  }

  if (isset($data['zoneinfo'])) {
    $tz = events_config_map_hid_timezone($data['zoneinfo']);
    if ($account->timezone != $tz) {
      $account->timezone = $tz;
      $needs_update = TRUE;
    }
  }

  if (isset($data['organizations']) && is_array($data['organizations'])) {
    $existing_term_ids = array();
    if (isset($account->data['organisations'])) {
      $existing_term_ids = $account->data['organisations'];
    }
    else {
      $account->data['organisations'] = array();
    }

    $new_term_ids = array();
    foreach ($data['organizations'] as $organization) {
      $term = events_config_get_organisation_term($organization->name, $organization->_id);
      if ($term) {
        $new_term_ids[] = $term->tid;
      }
    }

    if ($existing_term_ids != $new_term_ids) {
      $user_data['organisations'] = $new_term_ids;
      $account->data['organisations'] = $user_data['organisations'];
      $needs_update = TRUE;
    }
  }

  // HID verified.
  $role = user_role_load_by_name('HID verified');
  if ($data['verified']) {
    // Make sure $user->roles is an array.
    if (!isset($account->roles) || !is_array($account->roles)) {
      $account->roles = array();
    }
    if (!isset($account->roles[$role->rid])) {
      $account->roles = $account->roles + array($role->rid => $role->name);
      $needs_update = TRUE;
    }
  }
  else {
    if (isset($account->roles) && isset($account->roles[$role->rid])) {
      unset($account->roles[$role->rid]);
      $needs_update = TRUE;
    }
  }

  // IMO.
  $is_imo = FALSE;
  if (isset($data['functional_roles']) && is_array($data['functional_roles'])) {
    foreach ($data['functional_roles'] as $functional_role) {
      if ($functional_role->list == variable_get('evens_config_imo_list_id', '58e39c4eab77c100ae461bb4')) {
        $is_imo = TRUE;
        break;
      }
    }
  }

  $role = user_role_load_by_name('IMO');
  if ($is_imo) {
    // Make sure $user->roles is an array.
    if (!isset($account->roles) || !is_array($account->roles)) {
      $account->roles = array();
    }

    if (!isset($account->roles[$role->rid])) {
      $account->roles = $account->roles + array($role->rid => $role->name);
      $needs_update = TRUE;
    }
  }
  else {
    if (isset($account->roles) && isset($account->roles[$role->rid])) {
      unset($account->roles[$role->rid]);
      $needs_update = TRUE;
    }
  }

  if ($needs_update) {
    $user_data['hid_last_update'] = REQUEST_TIME;
    $account->data['hid_last_update'] = $user_data['hid_last_update'];
    user_save($account, $user_data);
  }
}

/**
 * Map timezone from HID.
 */
function events_config_map_hid_timezone($tz) {
  $mapping = array(
    'Pacific/Yap' => 'Pacific/Chuuk',
    'Poland' => 'Europe/Warsaw',
    'Portugal' => 'Europe/Lisbon',
    'PRC' => 'Asia/Shanghai',
    'ROC' => 'Asia/Taipei',
    'ROK' => 'Asia/Seoul',
    'Singapore' => 'Asia/Singapore',
    'Turkey' => 'Europe/Istanbul',
    'UCT' => 'UTC',
    'Universal' => 'UTC',
    'US/Alaska' => 'America/Anchorage',
    'US/Aleutian' => 'America/Adak',
    'US/Arizona' => 'America/Phoenix',
    'US/Central' => 'America/Chicago',
    'US/Eastern' => 'America/New_York',
    'US/East-Indiana' => 'America/Indiana/Indianapolis',
    'US/Hawaii' => 'Pacific/Honolulu',
    'US/Indiana-Starke' => 'America/Indiana/Knox',
    'US/Michigan' => 'America/Detroit',
    'US/Mountain' => 'America/Denver',
    'US/Pacific' => 'America/Los_Angeles',
    'US/Pacific-New' => 'America/Los_Angeles',
    'US/Samoa' => 'Link to Pacific/Pago_Pago',
    'Etc/UTC' => 'UTC',
    'W-SU' => 'Europe/Moscow',
    'Zulu' => 'UTC',
  );

  // Map if possible.
  if (array_key_exists($tz, $mapping)) {
    $tz = $mapping[$tz];
  }

  // Make sure timezone is valid.
  $zonelist = timezone_identifiers_list();
  if (!in_array($tz, $zonelist)) {
    // Fallback to UTC.
    $tz = 'UTC';
  }

  return $tz;
}
/**
 * Load or create a term.
 */
function events_config_get_term($name, $vocabulary, $external_id = NULL, $parent_id = NULL) {
  $output = array(
    'term' => FALSE,
    'new' => TRUE,
  );

  // Query by Id first.
  if ($external_id) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term');
    $query->entityCondition('bundle', $vocabulary, '=');
    $query->fieldCondition('field_external_id', 'value', $external_id, '=');
    $result = $query->execute();
  }

  // Query by name if not found or not defined.
  if (!$external_id && !isset($result['taxonomy_term'])) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term');
    $query->entityCondition('bundle', $vocabulary, '=');
    $query->propertyCondition('name', '%' . $name . '%', 'LIKE');
    $result = $query->execute();
  }

  // Make sure term exists.
  if (!isset($result['taxonomy_term'])) {
    $vocabularies = taxonomy_vocabulary_get_names();
    $term = (object) array(
      'vid' => $vocabularies[$vocabulary]->vid,
      'name' => $name,
      'vocabulary_machine_name' => $vocabulary,
    );

    // Fill in name field.
    $term->name_field['en'][0]['value'] = $name;

    if ($external_id) {
      $term->field_external_id['und'][0]['value'] = $external_id;
    }

    if ($parent_id) {
      $term->parent = $parent_id;
    }

    taxonomy_term_save($term);
    $output['new'] = TRUE;

    _events_config_log('Created new term in ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')');
  }
  else {
    $term_tid = reset($result['taxonomy_term']);
    $term = taxonomy_term_load($term_tid->tid);
    $needs_update = FALSE;

    if ($external_id) {
      if (!isset($term->field_external_id['und'][0]['value']) || $term->field_external_id['und'][0]['value'] != $external_id) {
        $term->field_external_id['und'][0]['value'] = $external_id;
        $needs_update = TRUE;
        _events_config_log('Updated needed for ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')');
        _events_config_log('External Id: ' . $term->field_external_id['und'][0]['value'] . ' versus ' . $external_id);
      }
      if ($term->name != $name) {
        $term->name = $name;
        $needs_update = TRUE;
        _events_config_log('Updated needed for ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')');
        _events_config_log('Name: ' . $term->name . ' versus ' . $name);
      }
    }

    if ($parent_id) {
      $parents = taxonomy_get_parents($term->tid);
      if ($parents) {
        $parent = reset($parents);
        if ($parent->tid != $parent_id) {
          if ($term->tid != $parent_id) {
            $term->parent = $parent_id;
          }
          else {
            _events_config_log('Tried setting term id as parent for ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')', 'error');
            $term->parent = 0;
          }
          _events_config_log('Updated needed for ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')');
          _events_config_log('Update parent: ' . $term->parent . ' versus ' . $parent_id);
          $needs_update = TRUE;
        }
      }
      else {
        if ($term->tid != $parent_id) {
          $term->parent = $parent_id;
          $needs_update = TRUE;
          _events_config_log('Updated needed for ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')');
          _events_config_log('New parent: ' . $term->parent . ' versus ' . $parent_id);
        }
        else {
          _events_config_log('Tried setting term id as parent for ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')', 'error');
        }
      }
    }

    if ($needs_update) {
      taxonomy_term_save($term);
      _events_config_log('Updated term in ' . $vocabulary . ': ' . $name . ' (' . $term->tid . ')');
    }
  }

  $output['term'] = $term;
  return $output;
}

/**
 * Fetch organisation term.
 */
function events_config_get_organisation_term($name, $external_id = NULL) {
  $output = events_config_get_term($name, 'ev_organization', $external_id);
  $term = $output['term'];

  if ($output['new']) {
    $term->field_ev_legend_color['und'][0]['rgb'] = sprintf('#%06X', mt_rand(0, 0xFFFFFF));
    taxonomy_term_save($term);
  }
  return $term;
}

/**
 * Fetch list term.
 */
function events_config_get_list_term($name, $external_id = NULL) {
  $output = events_config_get_term($name, 'ev_list', $external_id);
  $term = $output['term'];

  if ($output['new']) {
    $term->field_ev_legend_color['und'][0]['rgb'] = sprintf('#%06X', mt_rand(0, 0xFFFFFF));
    taxonomy_term_save($term);
  }
  return $term;
}

/**
 * Fetch list term.
 */
function events_config_get_coordination_hub_term($name, $external_id = NULL) {
  $output = events_config_get_term($name, 'ev_coordination_hub', $external_id);
  return $output['term'];
}

/**
 * Fetch location term.
 */
function events_config_get_location_term($name, $external_id = NULL, $parent_id = NULL) {
  $output = events_config_get_term($name, 'ev_location', $external_id, $parent_id);
  return $output['term'];
}

/**
 * Fetch disaster term.
 */
function events_config_get_disaster_term($name, $external_id = NULL) {
  $output = events_config_get_term($name, 'ev_disaster', $external_id);
  return $output['term'];
}

/**
 * Fetch theme term.
 */
function events_config_get_theme_term($name, $external_id = NULL) {
  $output = events_config_get_term($name, 'ev_theme', $external_id);
  return $output['term'];
}

/**
 * Fetch user data from HID.
 */
function events_config_get_user_data($account = NULL) {
  $organisations = array();

  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  if (isset($account->data['hid_last_update']) && REQUEST_TIME - $account->data['hid_last_update'] < 24 * 60 * 60) {
    $terms = taxonomy_term_load_multiple($account->data['organisations']);
    if ($terms) {
      foreach ($terms as $term) {
        $organisations[$term->tid] = $term->name;
      }
    }

    return array(
      'organisations' => $organisations,
    );
  }

  if (!isset($account->data['hybridauth']['id'])) {
    return array(
      'organisations' => $organisations,
    );
  }

  $secret = variable_get('events_config_hid_api_key', '');

  $endpoint = variable_get('events_config_hid_endpoint', 'https://api.humanitarian.id/api/v2/');
  $endpoint .= 'user/' . $account->data['hybridauth']['id'];

  $headers = array(
    'Accept' => 'application/json',
    'Authorization' => 'Bearer ' . $secret,
    'Content-Type' => 'application/json',
  );

  $response = drupal_http_request($endpoint, array(
    'headers' => $headers,
    'method' => 'GET',
  ));

  if ($response->data) {
    $data = json_decode($response->data);
    $tids = array();
    if (isset($data->organizations)) {
      foreach ($data->organizations as $organization) {
        $term = events_config_get_organisation_term($organization->name);
        $tids[] = $term->tid;
        $organisations[$term->tid] = $term->name;
      }
    }

    // Update user data.
    $user_data['organisations'] = $tids;
    $account->data['organisations'] = $user_data['organisations'];
    $user_data['hid_last_update'] = REQUEST_TIME;
    $account->data['hid_last_update'] = $user_data['hid_last_update'];

    // HID verified.
    $role = user_role_load_by_name('HID verified');
    if (isset($data->verified) && $data->verified) {
      $account->roles = $account->roles + array($role->rid => $role->name);
    }
    else {
      if (isset($account->roles[$role->rid])) {
        unset($account->roles[$role->rid]);
      }
    }

    // IMO.
    $is_imo = FALSE;
    if (isset($data->functional_roles) && is_array($data->functional_roles)) {
      foreach ($data->functional_roles as $functional_role) {
        if ($functional_role->list == variable_get('evens_config_imo_list_id', '58e39c4eab77c100ae461bb4')) {
          $is_imo = TRUE;
          break;
        }
      }
    }

    $role = user_role_load_by_name('IMO');
    if ($is_imo) {
      $account->roles = $account->roles + array($role->rid => $role->name);
    }
    else {
      if (isset($account->roles[$role->rid])) {
        unset($account->roles[$role->rid]);
      }
    }

    user_save($account, $user_data);
  }

  return array(
    'organisations' => $organisations,
  );
}

/**
 * Fetch user organizations from HID.
 */
function events_config_get_user_organizations($account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  $data = events_config_get_user_data($account);
  return $data['organisations'];
}

/**
 * Fetch data from HID.
 */
function events_config_api_call_list($type, $callback) {
  $secret = variable_get('events_config_hid_api_key', '');

  $offset = 0;
  $base_endpoint = variable_get('events_config_hid_endpoint', 'https://api.humanitarian.id/api/v2/');

  $headers = array(
    'Accept' => 'application/json',
    'Authorization' => 'Bearer ' . $secret,
    'Content-Type' => 'application/json',
  );

  while (TRUE) {
    $endpoint = $base_endpoint . 'list?sort=name&limit=200&type=' . $type . '&offset=' . $offset;
    $response = drupal_http_request($endpoint, array(
      'headers' => $headers,
      'method' => 'GET',
    ));

    if ($response->data) {
      $data = json_decode($response->data);
      if (empty($data)) {
        break;
      }
      foreach ($data as $item) {
        if ($item->name) {
          call_user_func($callback, $item->name, $item->_id);
        }
      }
    }
    else {
      break;
    }

    $offset += 200;
  }
}

/**
 * Implements hook_cron().
 */
function events_config_cron() {
  events_config_fetch_and_sync_organisations();
  events_config_fetch_and_sync_lists();
  events_config_fetch_and_sync_coordination_hubs();
  events_config_fetch_and_sync_locations();
  events_config_fetch_and_sync_disasters();
  events_config_fetch_and_sync_themes();
}

/**
 * Fetch and sync organisations from HID.
 */
function events_config_fetch_and_sync_organisations() {
  $last_run = variable_get('events_config_fetch_and_sync_organisations_last_run', 0);
  if ((REQUEST_TIME - $last_run) >= 86400) {
    events_config_api_call_list('organization', 'events_config_get_organisation_term');
    cache_clear_all('events_event:organisations', 'cache');
    variable_set('events_config_fetch_and_sync_organisations_last_run', REQUEST_TIME);
  }
}

/**
 * Fetch and sync lists from HID.
 */
function events_config_fetch_and_sync_lists() {
  $last_run = variable_get('events_config_fetch_and_sync_lists_last_run', 0);
  if ((REQUEST_TIME - $last_run) >= 86400) {
    events_config_api_call_list('bundle', 'events_config_get_list_term');
    cache_clear_all('events_event:clusters', 'cache');
    variable_set('events_config_fetch_and_sync_lists_last_run', REQUEST_TIME);
  }
}

/**
 * Fetch and sync coordination hubs from HID.
 */
function events_config_fetch_and_sync_coordination_hubs() {
  $last_run = variable_get('events_config_fetch_and_sync_coordination_hubs_last_run', 0);
  if ((REQUEST_TIME - $last_run) >= 86400) {
    events_config_api_call_list('office', 'events_config_get_coordination_hub_term');
    cache_clear_all('events_event:coordination_hubs', 'cache');
    variable_set('events_config_fetch_and_sync_coordination_hubs_last_run', REQUEST_TIME);
  }
}

/**
 * Fetch and sync locations from HRInfo.
 */
function events_config_fetch_and_sync_locations() {
  $last_run = variable_get('events_config_fetch_and_sync_locations_last_run', 0);
  if ((REQUEST_TIME - $last_run) >= (3 * 86400)) {
    events_config_fetch_and_sync_locations_endpoint('https://www.humanitarianresponse.info/en/api/v1.0/locations?filter[admin_level]=0');
    events_config_fetch_and_sync_locations_endpoint('https://www.humanitarianresponse.info/en/api/v1.0/locations?filter[admin_level]=1', TRUE, 2);
    events_config_fetch_and_sync_locations_endpoint('https://www.humanitarianresponse.info/en/api/v1.0/locations?filter[admin_level]=2', TRUE, 3);
    events_config_fetch_and_sync_locations_endpoint('https://www.humanitarianresponse.info/en/api/v1.0/locations?filter[admin_level]=3', TRUE, 4);

    cache_clear_all('events_event:locations', 'cache');
    cache_clear_all('events_event:edit-locations', 'cache');
    variable_set('events_config_fetch_and_sync_locations_last_run', REQUEST_TIME);
  }
}

/**
 * Fetch and sync locations from HRInfo.
 */
function events_config_fetch_and_sync_locations_endpoint($endpoint, $parent_needed = FALSE, $max_depth = 9) {
  $url = $endpoint;
  $page = 1;

  while (TRUE) {
    $fetch_url = $url . '&page=' . $page;
    _events_config_log('Fetching ' . $fetch_url);
    $request = drupal_http_request($fetch_url);
    if (isset($request->data)) {
      $data = drupal_json_decode($request->data);
      if (empty($data['data'])) {
        _events_config_log('No data received from ' . $fetch_url);
        break;
      }

      foreach ($data['data'] as $item) {
        if (isset($item['label']) && $item['label']) {
          $parent = 0;
          if (isset($item['parent'][0]['id'])) {
            // Skip levels that are too deep.
            if (count($item['parents']) > $max_depth) {
              continue;
            }

            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'taxonomy_term');
            $query->entityCondition('bundle', 'ev_location', '=');
            $query->fieldCondition('field_external_id', 'value', $item['parent'][0]['id'], '=');
            $result = $query->execute();

            // Parent must exist.
            if ($parent_needed && !isset($result['taxonomy_term'])) {
              continue;
            }

            $parent_term = reset($result['taxonomy_term']);
            $parent = $parent_term->tid;
          }

          if ($parent_needed && $parent == 0) {
            continue;
          }
          events_config_get_location_term($item['label'], $item['id'], $parent);
        }
      }

      $page++;
    }
    else {
      _events_config_log('No data received from ' . $fetch_url);
      break;
    }
  }
}

/**
 * Fetch and sync disasters from RW.
 */
function events_config_fetch_and_sync_disasters() {
  $last_run = variable_get('events_config_fetch_and_sync_disasters_last_run', 0);
  if ((REQUEST_TIME - $last_run) >= 86400) {
    $endpoint = 'https://api.reliefweb.int/v1/disasters';
    $offset = 0;

    while (TRUE) {
      $params = array(
        'appname' => 'hrevents',
        'preset' => 'external',
        'offset' => $offset,
        'limit' => 200,
      );

      $url = $endpoint . '?' . drupal_http_build_query($params);
      $request = drupal_http_request($url);
      if (isset($request->data)) {
        $data = drupal_json_decode($request->data);
        if (empty($data['data'])) {
          break;
        }
        foreach ($data['data'] as $item) {
          if ($item['fields']['name']) {
            events_config_get_disaster_term($item['fields']['name'], $item['id']);
          }
        }
      }
      else {
        break;
      }
      $offset += 200;
    }
    cache_clear_all('events_event:disasters', 'cache');
    variable_set('events_config_fetch_and_sync_disasters_last_run', REQUEST_TIME);
  }
}

/**
 * Fetch and sync themes from RW.
 */
function events_config_fetch_and_sync_themes() {
  $last_run = variable_get('events_config_fetch_and_sync_themes_last_run', 0);
  if ((REQUEST_TIME - $last_run) >= 86400) {
    $endpoint = 'https://api.reliefweb.int/v1/references/themes';
    $params = array(
      'appname' => 'hrevents',
    );

    $url = $endpoint . '?' . drupal_http_build_query($params);
    $request = drupal_http_request($url);
    if (isset($request->data)) {
      $data = drupal_json_decode($request->data);
      foreach ($data['data'] as $item) {
        events_config_get_theme_term($item['fields']['name'], $item['id']);
      }
    }
    cache_clear_all('events_event:themes', 'cache');
    variable_set('events_config_fetch_and_sync_themes_last_run', REQUEST_TIME);
  }
}

/**
 * Implements hook_libraries_info_alter().
 */
function events_config_libraries_info_alter(&$libraries) {
  unset($libraries['fullcalendar']['files']['css']);
}

/**
 * Implements hook_libraries_info_alter().
 */
function _events_config_log($message, $type = 'notice') {
  if (function_exists('drush_log')) {
    drush_log($message, $type);
  }
}

/**
 * Implements template_preprocess_page().
 */
function events_config_preprocess_page(&$variables) {
  // Add language links.
  global $language;
  $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
  $links = language_negotiation_get_switch_links('language', $path);
  $vars = array(
    'links' => $links->links,
    'attributes' => array(
      'class' => array('cd-dropdown-menu'),
      'role' => 'menu',
      'id' => 'cd-language',
      'aria-labelledby' => 'cd-language-toggle',
    ),
  );

  $output = '';
  $output .= '<div class="cd-global-header__language-switcher"><div class="language-switcher">';
  $output .= '<button type="button" class="cd-global-header__sites-btn" data-toggle="dropdown" id="cd-language-toggle">';
  $output .= $language->language;
  $output .= '<i class="icon-arrow-down" aria-hidden="true"></i></button>';
  $output .= theme('links__locale_block', $vars);
  $output .= '</div></div>';

  $variables['page']['language_switcher'] = $output;
}

/**
 * Implements hook_language_switch_links_alter().
 */
function events_config_language_switch_links_alter(array &$links, $type, $path) {
  foreach ($links as $key => $link) {
    $links[$key]['title'] = strtoupper($link['language']->language);
  }
}
