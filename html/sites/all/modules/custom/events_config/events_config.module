<?php
/**
 * @file
 * Drupal hooks for events_config.
 */

include_once 'events_config.features.inc';

/**
 * Implements hook_hybridauth_user_login().
 */
function events_config_hybridauth_user_login($account, $data) {
  watchdog('hid account', print_r($account, TRUE));
  watchdog('hid data', print_r($data, TRUE));

  $needs_update = FALSE;
  $user_data = array();

  if (isset($data['locale'])) {
    if (in_array($data['locale'], array('en', 'fr'))) {
      if ($account->language != $data['locale']) {
        $account->language = $data['locale'];
        $needs_update = TRUE;
      }
    }
  }

  if (isset($data['zoneinfo'])) {
    if ($account->timezone != $data['zoneinfo']) {
      $account->timezone = $data['zoneinfo'];
      $needs_update = TRUE;
    }
  }

  if (isset($data['organizations']) && is_array($data['organizations'])) {
    $existing_term_ids = array();
    if (isset($account->data['organisations'])) {
      $existing_term_ids = $account->data['organisations'];
    }
    else {
      $account->data['organisations'] = array();
    }

    $new_term_ids = array();
    foreach ($data['organizations'] as $organization) {
      $term = events_config_get_organisation_term($organization->name);
      if ($term) {
        $new_term_ids[] = $term->tid;
      }
    }

    if ($existing_term_ids != $new_term_ids) {
      $user_data['organisations'] = $new_term_ids;
      $account->data['organisations'] = $user_data['organisations'];
      $needs_update = TRUE;
    }
  }

  if ($needs_update) {
    $user_data['hid_last_update'] = REQUEST_TIME;
    $account->data['hid_last_update'] = $user_data['hid_last_update'];
    user_save($account, $user_data);
  }
}

/**
 * Fetch organisation term.
 */
function events_config_get_organisation_term($name) {
  $term = FALSE;

  // Make sure term exists.
  $terms = taxonomy_get_term_by_name($name, 'ev_organization');
  if (!$terms) {
    $vocabularies = taxonomy_vocabulary_get_names();
    $term = (object) array(
      'vid' => $vocabularies['ev_organization']->vid,
      'name' => $name,
      'vocabulary_machine_name' => 'ev_organization',
    );
    $term->field_ev_legend_color['und'][0]['rgb'] = sprintf('#%06X', mt_rand(0, 0xFFFFFF));
    taxonomy_term_save($term);
  }
  else {
    $term = array_shift($terms);
  }

  return $term;
}

/**
 * Fetch user data from HID.
 */
function events_config_get_user_data($account = NULL) {
  $organisations = array();

  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  if (isset($account->data['hid_last_update']) && REQUEST_TIME - $account->data['hid_last_update'] < 24 * 60 * 60) {
    $terms = taxonomy_term_load_multiple($account->data['organisations']);
    if ($terms) {
      foreach ($terms as $term) {
        $organisations[$term->tid] = $term->name;
      }
    }

    return array(
      'organisations' => $organisations,
    );
  }

  if (!isset($account->data['hybridauth']['id'])) {
    return array(
      'organisations' => $organisations,
    );
  }

  $secret = variable_get('events_config_hid_api_key', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImhpZC1kZXYifQ.eyJpZCI6IjU4ZTRhNmNjM2YwZTBkMDBhZWVjNmZjNiIsImlhdCI6MTQ5MjAwODU3NH0.MxQM-WJLxU5-YRemztLcdLF8yrtGTv-C5ZM4qVkQZlFd6_917YcaMAvOBdTfNxIr8bMArGE5nNXK0l9n0VDqdcnCAFm-x50DcqzFeiGhzC2yyNgJ8XwR9kKnMBVj7vV3KDngSh0rSloGMAlRMEzSQRp8iv3iT0hcr4hRevg4MMkOlkHbVmAjfpwr9trntvu0dv0c3oxBH6ZWnBC8XxSLfIfzbbO8A5_XnEr10kDNKP08SFcHPvwY0jhLxs5-TLbUV7RD21D-Ci8qBSTSAWokQ_mJT8aHAUMhTwh_DGVEa5syOlcabYjeOChV6g1r7SiKNLr1cmGliR0wcKSUQrq5PA');

  $endpoint = 'https://api.humanitarian.id/api/v2/';
  $endpoint .= 'user/' . $account->data['hybridauth']['id'];

  $headers = array(
    'Accept' => 'application/json',
    'Authorization' => 'Bearer ' . $secret,
    'Content-Type' => 'application/json',
  );

  $response = drupal_http_request($endpoint, array(
    'headers' => $headers,
    'method' => 'GET',
  ));

  if ($response->data) {
    $data = json_decode($response->data);
    $tids = array();
    foreach ($data->organizations as $organization) {
      $term = events_config_get_organisation_term($organization->name);
      $tids[] = $term->tid;
      $organisations[$term->tid] = $term->name;
    }

    // Update user data.
    $user_data['organisations'] = $tids;
    $account->data['organisations'] = $user_data['organisations'];
    $user_data['hid_last_update'] = REQUEST_TIME;
    $account->data['hid_last_update'] = $user_data['hid_last_update'];
    user_save($account, $user_data);
  }

  return array(
    'organisations' => $organisations,
  );
}

/**
 * Fetch user organizations from HID.
 */
function events_config_get_user_organizations($account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  $data = events_config_get_user_data($account);
  return $data['organisations'];
}
