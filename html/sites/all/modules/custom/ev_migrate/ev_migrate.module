<?php
/**
 * @file
 * Code for Events migration.
 */

/**
 * Wrapper around log function.
 */
function ev_migrate_log($message) {
  if (function_exists('drush_log')) {
    drush_log($message);
  }
  else {
    watchdog('Event migrate', $message);
  }
}

/**
 * Implements hook_cron().
 */
function ev_migrate_cron() {
  if (variable_get('ev_migrate_sync_from_hrinfo', FALSE)) {
    _ev_migrate_events_from_hrinfo();
  }
  if (variable_get('ev_migrate_sync_from_reliefweb', FALSE)) {
    _ev_migrate_events_from_reliefweb();
  }
}

/**
 * Sync from Reliefweb.
 */
function _ev_migrate_events_from_reliefweb() {
  $last_run = variable_get('ev_migrate_last_run_reliefweb', 0);
  if ((REQUEST_TIME - $last_run) >= 7 * 86400) {
    // Reset kill switch if needed.
    if (variable_get('ev_migrate_stop_processing_reliefweb', FALSE)) {
      variable_del('ev_migrate_stop_processing_reliefweb');
      variable_set('ev_migrate_page_reliefweb', 0);
    }
  }

  if (variable_get('ev_migrate_stop_processing_reliefweb', FALSE)) {
    return;
  }

  module_load_include('inc', 'ev_migrate', 'ev_migrate.reliefweb');

  // Migrate n batches.
  for ($i = 0; $i < variable_get('ev_migrate_num_of_runs', 2); $i++) {
    $limit = 20;
    $page = variable_get('ev_migrate_page_reliefweb', 0);
    $offset = $limit * $page;
    $data = _ev_migrate_reliefweb_fetch($limit, $offset);
    if (!empty($data)) {
      foreach ($data as $row) {
        ev_migrate_process_row_reliefweb($row, 'reliefweb-');
      }
      variable_set('ev_migrate_page_reliefweb', $page++);
    }
    else {
      variable_set('ev_migrate_stop_processing_reliefweb', TRUE);
    }
  }

  // Update last sync.
  $source_term = ev_migrate_get_term('ReliefWeb.int', 'ev_source');
  if ($source_term) {
    $source_term->field_source_last_sync[LANGUAGE_NONE][0]['value'] = REQUEST_TIME;
    taxonomy_term_save($source_term);
  }

  variable_set('ev_migrate_last_run_hrinfo', REQUEST_TIME);
}

/**
 * Sync from HRInfo.
 */
function _ev_migrate_events_from_hrinfo() {
  // HRInfo, reset every 7 days.
  $last_run = variable_get('ev_migrate_last_run_hrinfo', 0);
  if ((REQUEST_TIME - $last_run) >= 7 * 86400) {
    // Reset kill switch if needed.
    if (variable_get('ev_migrate_stop_processing_hrinfo', FALSE)) {
      variable_del('ev_migrate_stop_processing_hrinfo');
      variable_set('ev_migrate_page_hrinfo', 0);
    }
  }

  if (variable_get('ev_migrate_stop_processing_hrinfo', FALSE)) {
    return;
  }

  module_load_include('inc', 'ev_migrate', 'ev_migrate.hrinfo');

  // Migrate n batches.
  for ($i = 0; $i < variable_get('ev_migrate_num_of_runs', 10); $i++) {
    ev_migrate_events_from_hrinfo();
  }

  variable_set('ev_migrate_last_run_hrinfo', REQUEST_TIME);
}

/**
 * Implements hook_menu().
 */
function ev_migrate_menu() {
  $items['from-hrinfo/%'] = array(
    'title' => 'Redirect from HR Info',
    'page callback' => 'ev_migrate_redirect_from_hrinfo',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Redirect from HR Info.
 */
function ev_migrate_redirect_from_hrinfo($external_nid) {
  if (!is_numeric($external_nid)) {
    drupal_access_denied();
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'ev_event', '=');
  $query->fieldCondition('field_event_external_id', 'value', 'hrinfo-' . $external_nid, '=');
  $result = $query->execute();

  if (!isset($result['node'])) {
    drupal_not_found();
    return;
  }

  $nids = array_keys($result['node']);
  $nid = reset($nids);
  drupal_goto('node/' . $nid, array(), 301);
}

/**
 * Implements hook_node_presave().
 */
function ev_migrate_node_presave($node) {
  if (isset($node->ev_migrate_changed)) {
    $node->changed = $node->ev_migrate_changed;
    $node->timestamp = $node->ev_migrate_changed;
  }
  if (isset($node->ev_migrate_created)) {
    $node->created = $node->ev_migrate_created;
  }
}

/**
 * Load a term.
 */
function ev_migrate_get_term($name, $vocabulary) {
  // Query by name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->entityCondition('bundle', $vocabulary, '=');
  $query->propertyCondition('name', $name, '=');
  $result = $query->execute();

  // Make sure term exists.
  if (!isset($result['taxonomy_term'])) {
    return FALSE;
  }

  $term_tid = reset($result['taxonomy_term']);
  $term = taxonomy_term_load($term_tid->tid);
  return $term;
}

/**
 * Fetch and save a remote file.
 */
function ev_migrate_fetch_and_save_file($filename, $url, $timestamp) {
  $fid = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('filename', $filename)
    ->range(0, 1)
    ->execute()->fetchField();

  if (variable_get('ev_migrate_file_authentication_hrinfo', '')) {
    $url = str_replace('https://', 'https://' . variable_get('ev_migrate_file_authentication_hrinfo', '') . '@', $url);
  }

  if (!$fid) {
    $field_info = field_info_field('field_document_file');
    $instance = field_info_instance('multifield', 'field_document_file', 'field_event_documents');

    $destination = file_stream_wrapper_uri_normalize($field_info['settings']['uri_scheme'] . '://' . $instance['settings']['file_directory'] . '/' . format_date($timestamp, 'custom', 'Y-m-d') . '/');
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $file = _ev_migrate_system_retrieve_file($url, $destination, TRUE, FILE_EXISTS_RENAME);
    if ($file) {
      return $file->fid;
    }
    else {
      ev_migrate_log('Unable to fetch ' . $url);
    }
  }
  else {
    return $fid;
  }

  return FALSE;
}

/**
 * Attempts to get a file using drupal_http_request and to store it locally.
 *
 * @see system_retrieve_file()
 */
function _ev_migrate_system_retrieve_file($url, $destination = NULL, $managed = FALSE, $replace = FILE_EXISTS_RENAME) {
  $parsed_url = parse_url($url);
  if (!isset($destination)) {
    $path = file_build_uri(drupal_basename($parsed_url['path']));
  }
  else {
    if (is_dir(drupal_realpath($destination))) {
      // Prevent URIs with triple slashes when glueing parts together.
      $path = str_replace('///', '//', "$destination/") . drupal_basename($parsed_url['path']);
    }
    else {
      $path = $destination;
    }
  }
  $result = drupal_http_request($url);
  if ($result->code != 200) {
    return FALSE;
  }
  $local = $managed ? file_save_data($result->data, $path, $replace) : file_unmanaged_save_data($result->data, $path, $replace);
  if (!$local) {
    drupal_set_message(t('@remote could not be saved to @path.', array('@remote' => $url, '@path' => $path)), 'error');
  }

  return $local;
}
