<?php
/**
 * @file
 * Code for Events migration.
 */

/**
 * Wrapper around log function.
 */
function ev_migrate_log($message) {
  if (function_exists('drush_log')) {
    drush_log($message);
  }
  else {
    watchdog('Event migrate', $message);
  }
}

/**
 * Implements hook_cron().
 */
function ev_migrate_cron() {
  // HRInfo, reset every 7 days.
  $last_run = variable_get('ev_migrate_last_run_hrinfo', 0);
  if ((REQUEST_TIME - $last_run) >= 7 * 86400) {
    // Reset kill switch if needed.
    if (variable_get('ev_migrate_stop_processing_hrinfo', FALSE)) {
      variable_del('ev_migrate_stop_processing_hrinfo');
      variable_set('ev_migrate_page_hrinfo', 0);
    }
  }

  if (variable_get('ev_migrate_stop_processing_hrinfo', FALSE)) {
    return;
  }

  // Migrate 5 batches.
  ev_migrate_events();
  ev_migrate_events();
  ev_migrate_events();
  ev_migrate_events();
  ev_migrate_events();

  variable_set('ev_migrate_last_run_hrinfo', REQUEST_TIME);
}

/**
 * Implements hook_menu().
 */
function ev_migrate_menu() {
  $items['from-hrinfo/%'] = array(
    'title' => 'Redirect from HR Info',
    'page callback' => 'ev_migrate_redirect_from_hrinfo',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Redirect from HR Info.
 */
function ev_migrate_redirect_from_hrinfo($external_nid) {
  if (!is_numeric($external_nid)) {
    drupal_access_denied();
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'ev_event', '=');
  $query->fieldCondition('field_event_external_id', 'value', 'hrinfo-' . $external_nid, '=');
  $result = $query->execute();

  if (!isset($result['node'])) {
    drupal_not_found();
    return;
  }

  $nids = array_keys($result['node']);
  $nid = reset($nids);
  drupal_goto('node/' . $nid, array(), 301);
}

/**
 * Migrate events.
 */
function ev_migrate_events() {
  if (variable_get('ev_migrate_stop_processing_hrinfo', FALSE)) {
    ev_migrate_log('Kill switch is enabled!');
    return;
  }

  ev_migrate_log('Getting page ' . variable_get('ev_migrate_page_hrinfo', 0));

  $page = variable_get('ev_migrate_page_hrinfo', 0);
  $api_url = variable_get('ev_migrate_api_url_hrinfo', '');
  $shared_secret = variable_get('ev_migrate_shared_secret_hrinfo', 'ThisIsMySecret');
  $timestamp = REQUEST_TIME;

  // Build hash.
  $hash = md5($shared_secret . '_' . $page . '_' . $timestamp);

  // Build URL;
  $url = $api_url;
  $url .= '/' . $page;
  $url .= '/' . $timestamp;
  $url .= '/' . $hash;

  // Get data.
  $request = drupal_http_request($url);
  if (isset($request->data)) {
    $data = drupal_json_decode($request->data);
    if (count($data)) {
      foreach ($data as $row) {
        ev_migrate_process_row($row, 'hrinfo-');
      }
      variable_set('ev_migrate_page_hrinfo', $page + 1);
      return;
    }
  }

  variable_set('ev_migrate_stop_processing', TRUE);
};

/**
 * Migrate event.
 */
function ev_migrate_event($nid) {
  $api_url = variable_get('ev_migrate_api_url_single_hrinfo', '');
  $shared_secret = variable_get('ev_migrate_shared_secret_hrinfo', 'ThisIsMySecret');
  $timestamp = REQUEST_TIME;

  // Build hash.
  $hash = md5($shared_secret . '_' . $timestamp);

  // Build URL;
  $url = $api_url;
  $url .= '/' . $nid;
  $url .= '/' . $timestamp;
  $url .= '/' . $hash;

  // Get data.
  $request = drupal_http_request($url);
  if (isset($request->data)) {
    $data = drupal_json_decode($request->data);
    ev_migrate_process_row($data);
  }
};

/**
 * Process event data.
 */
function ev_migrate_process_row($row, $prefix = '') {
  $needs_update = FALSE;

  ev_migrate_log('Migrating ' . $row['url']);

  // See if the node already exists.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'ev_event', '=');
  $query->fieldCondition('field_event_external_id', 'value', $prefix . $row['nid'], '=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nid = reset($nids);
    $event = node_load($nid);
    $event->log = 'Event imported from ' . $row['url'];
    $event->do_not_send_email = TRUE;
  }
  else {
    // New events alsways needs an update.
    $needs_update = TRUE;

    // Make sure we have a user.
    $account = user_load_by_mail($row['author']['email']);
    if (!$account) {
      // Check if there's a user by the same name.
      if (user_load_by_name(!empty($row['author']['name']) ? $row['author']['name'] : $row['author']['email'])) {
        $row['author']['name'] = !empty($row['author']['name']) ? $row['author']['name'] : $row['author']['email'];
        $row['author']['name'] .= '_' . REQUEST_TIME;
      }

      // Cleanup init.
      $row['author']['init'] = str_replace('oauthconnector_hid_oauth__', '', $row['author']['init']);
      if (empty($row['author']['init'])) {
        $row['author']['init'] = $row['author']['email'];
      }

      $row['author']['name'] = !empty($row['author']['name']) ? $row['author']['name'] : $row['author']['email'];
      if (strlen($row['author']['name']) > 60) {
        $row['author']['name'] = substr($row['author']['name'], 0, 60);
      }

      // Create user object.
      $account = array(
        'name' => $row['author']['name'],
        'mail' => $row['author']['email'],
        'status' => 1,
        'init' => $row['author']['init'],
        'language' => $row['author']['language'],
        'timezone' => $row['author']['timezone'],
      );
      $account = user_save(NULL, $account);

      // Save the HID association with hybridauth.
      $hdata = array(
        'provider' => 'HumanitarianId',
        'identifier' => $row['author']['init'],
      );

      // Ignore errors.
      try {
        _hybridauth_identity_save($hdata, $account->uid);
      }
      catch (Exception $e) {
        // Ignore it, not much we can do.
      }
    }

    // Create a new event.
    $event = new stdClass();
    $event->type = 'ev_event';
    $event->status = 1;
    node_object_prepare($event);

    $event->language = 'en';
    $event->uid = $account->uid;
    $event->status = TRUE;
    $event->promote = FALSE;
    $event->comment = FALSE;
    $event->log = 'Event imported from ' . $row['url'];
  }

  $event->revision = TRUE;

  $needs_update = $needs_update || $event->title != $row['title'];
  $event->title = $row['title'];

  $needs_update = $needs_update || $event->created != $row['created'];
  $event->created = $row['created'];

  $needs_update = $needs_update || $event->changed != $row['changed'];
  $event->changed = $row['changed'];

  $event->ev_migrate_created = $event->created;
  $event->ev_migrate_changed = $event->changed;

  $date_data = array();
  if (!empty($row['date']['rrule'])) {
    $field_info = field_info_field('field_event_date');
    // Double check date format used.
    if (strpos(date_type_format($field_info['type']), 'T') !== FALSE) {
      $row['date']['value'] = str_replace(' ', 'T', $row['date']['value']);
      $row['date']['value2'] = str_replace(' ', 'T', $row['date']['value2']);
    }

    // Build all values.
    $date_data = date_repeat_build_dates($row['date']['rrule'], NULL, $field_info, $row['date']);
  }
  else {
    $date_data[0] = $row['date'];
  }

  if (isset($event->field_event_date[LANGUAGE_NONE][0]['value'])) {
    $needs_update = $needs_update || $event->field_event_date[LANGUAGE_NONE][0]['value'] != $date_data[0]['value'];
    $needs_update = $needs_update || $event->field_event_date[LANGUAGE_NONE][0]['value2'] != $date_data[0]['value2'];
    $needs_update = $needs_update || $event->field_event_date[LANGUAGE_NONE][0]['rrule'] != $date_data[0]['rrule'];
  }
  $event->field_event_date[LANGUAGE_NONE] = $date_data;

  // Store external nid.
  $needs_update = $needs_update || $event->field_event_external_id[LANGUAGE_NONE][0]['value'] != $prefix . $row['nid'];
  $event->field_event_external_id[LANGUAGE_NONE][0]['value'] = $prefix . $row['nid'];

  if (isset($row['description']['value'])) {
    $needs_update = $needs_update || $event->field_event_info[LANGUAGE_NONE][0]['value'] != $row['description']['value'];
    $event->field_event_info[LANGUAGE_NONE][] = array(
      'value' => $row['description']['value'],
      'format' => 'markdown',
    );
  }

  if (isset($row['address']) && isset($row['address']['locality'])) {
    $needs_update = $needs_update || $event->field_event_location_details[LANGUAGE_NONE][0]['value'] != $row['address']['locality'];
    $event->field_event_location_details[LANGUAGE_NONE][]['value'] = $row['address']['locality'];
  }

  if (isset($row['category']) && $category = ev_migrate_get_term($row['category'], 'ev_category')) {
    $needs_update = $needs_update || $event->field_event_category[LANGUAGE_NONE][0]['tid'] != $category->tid;
    $event->field_event_category[LANGUAGE_NONE][]['tid'] = $category->tid;
  }

  if (isset($row['location']) && $location = ev_migrate_get_term($row['location'], 'ev_location')) {
    $needs_update = $needs_update || $event->field_event_location[LANGUAGE_NONE][0]['tid'] != $location->tid;
    $event->field_event_location[LANGUAGE_NONE][]['tid'] = $location->tid;
  }

  if (isset($row['themes']) && is_array($row['themes'])) {
    $current_original_theme = isset($event->field_event_original_theme[LANGUAGE_NONE][0]['value']) ? $event->field_event_original_theme[LANGUAGE_NONE][0]['value'] : '';

    $event->field_event_theme[LANGUAGE_NONE] = array();
    $event->field_event_original_theme[LANGUAGE_NONE][0]['value'] = '';
    foreach ($row['themes'] as $name) {
      if ($theme = ev_migrate_get_term($name, 'ev_theme')) {
        $event->field_event_theme[LANGUAGE_NONE][]['tid'] = $theme->tid;
      }
      else {
        if (!isset($event->field_event_original_theme[LANGUAGE_NONE][0]['value'])) {
          $event->field_event_original_theme[LANGUAGE_NONE][0]['value'] = $name;
        }
        else {
          $event->field_event_original_theme[LANGUAGE_NONE][0]['value'] .= ', ' . $name;
        }
      }
    }

    // Limit to 250 characters.
    if (isset($event->field_event_original_theme[LANGUAGE_NONE][0]['value'])) {
      $event->field_event_original_theme[LANGUAGE_NONE][0]['value'] = substr($event->field_event_original_theme[LANGUAGE_NONE][0]['value'], 0, 250);
    }

    $needs_update = $needs_update || $event->field_event_original_theme[LANGUAGE_NONE][0]['value'] != $current_original_theme;
  }

  if (isset($row['organizations']) && is_array($row['organizations'])) {
    $current_organization = isset($event->field_event_organization[LANGUAGE_NONE]) ? $event->field_event_organization[LANGUAGE_NONE] : array();
    $event->field_event_organization[LANGUAGE_NONE] = array();
    foreach ($row['organizations'] as $name) {
      if ($organization = ev_migrate_get_term($name, 'ev_organization')) {
        $event->field_event_organization[LANGUAGE_NONE][]['tid'] = $organization->tid;
      }
    }
    $needs_update = $needs_update || $event->field_event_organization[LANGUAGE_NONE] != $current_organization;
  }

  if (isset($row['disasters']) && is_array($row['disasters'])) {
    $current_disaster = isset($event->field_event_disasters[LANGUAGE_NONE]) ? $event->field_event_disasters[LANGUAGE_NONE] : array();
    $event->field_event_disasters[LANGUAGE_NONE] = array();
    foreach ($row['disasters'] as $name) {
      if ($disaster = ev_migrate_get_term($name, 'ev_disaster')) {
        $event->field_event_disasters[LANGUAGE_NONE][]['tid'] = $disaster->tid;
      }
    }
    $needs_update = $needs_update || $event->field_event_disasters[LANGUAGE_NONE] != $current_disaster;
  }

  $cluster_tids = array();
  if (isset($row['sectors']) && is_array($row['sectors'])) {
    foreach ($row['sectors'] as $name) {
      if ($sector = ev_migrate_get_term($name, 'ev_list')) {
        $cluster_tids[] = $sector->tid;
      }
      elseif (isset($row['location']) && $sector = ev_migrate_get_term($row['location'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $sector->tid;
      }
      elseif (isset($row['country']) && $sector = ev_migrate_get_term($row['country'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $sector->tid;
      }
    }
  }

  if (isset($row['bundles']) && is_array($row['bundles'])) {
    foreach ($row['bundles'] as $name) {
      if ($bundle = ev_migrate_get_term($name, 'ev_list')) {
        $cluster_tids[] = $bundle->tid;
      }
      elseif (isset($row['location']) && $bundle = ev_migrate_get_term($row['location'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $bundle->tid;
      }
      elseif (isset($row['country']) && $bundle = ev_migrate_get_term($row['country'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $bundle->tid;
      }
    }
  }

  if (!empty($cluster_tids)) {
    $current_cluster_tids = isset($event->field_event_cluster[LANGUAGE_NONE]) ? $event->field_event_cluster[LANGUAGE_NONE] : array();
    $event->field_event_cluster[LANGUAGE_NONE] = array();
    // Remove duplicates.
    $cluster_tids = array_unique($cluster_tids);
    foreach ($cluster_tids as $cluster_tid) {
      $event->field_event_cluster[LANGUAGE_NONE][]['tid'] = $cluster_tid;
    }
    $needs_update = $needs_update || $event->field_event_cluster[LANGUAGE_NONE] != $current_cluster_tids;
  }

  if (isset($row['coordination_hubs']) && is_array($row['coordination_hubs'])) {
    $current_coordination_hub = isset($event->field_event_coordination_hub[LANGUAGE_NONE]) ? $event->field_event_coordination_hub[LANGUAGE_NONE] : array();
    $event->field_event_coordination_hub[LANGUAGE_NONE] = array();
    foreach ($row['coordination_hubs'] as $name) {
      if ($coordination_hub = ev_migrate_get_term($name, 'ev_coordination_hub')) {
        $event->field_event_coordination_hub[LANGUAGE_NONE][]['tid'] = $coordination_hub->tid;
      }
    }
    $needs_update = $needs_update || $event->field_event_coordination_hub[LANGUAGE_NONE] != $current_coordination_hub;
  }

  $current_documents = isset($event->field_event_documents[LANGUAGE_NONE]) ? $event->field_event_documents[LANGUAGE_NONE] : array();
  if (isset($row['event_meeting_minutes']) && is_array($row['event_meeting_minutes'])) {
    $meeting_minute_term_info = events_config_get_term('Meeting Minutes', 'ev_document_type');
    $meeting_minute_tid = $meeting_minute_term_info['term']->tid;
    foreach ($row['event_meeting_minutes'] as $event_meeting_minute) {
      $fid = ev_migrate_fetch_and_save_file($event_meeting_minute['name'], $event_meeting_minute['url'], $event->created);
      if ($fid) {
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_type'][LANGUAGE_NONE][0]['tid'] = $meeting_minute_tid;
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_file'][LANGUAGE_NONE][0] = array(
          'fid' => $fid,
          'display' => 1,
          'description' => $event_meeting_minute['name'],
        );
      }
    }
  }

  if (isset($row['event_agenda']) && is_array($row['event_agenda'])) {
    $meeting_minute_term_info = events_config_get_term('Agenda', 'ev_document_type');
    $meeting_minute_tid = $meeting_minute_term_info['term']->tid;
    foreach ($row['event_agenda'] as $event_meeting_minute) {
      $fid = ev_migrate_fetch_and_save_file($event_meeting_minute['name'], $event_meeting_minute['url'], $event->created);
      if ($fid) {
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_type'][LANGUAGE_NONE][0]['tid'] = $meeting_minute_tid;
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_file'][LANGUAGE_NONE][0] = array(
          'fid' => $fid,
          'display' => 1,
          'description' => $event_meeting_minute['name'],
        );
      }
    }
  }

  if (isset($event->field_event_documents[LANGUAGE_NONE])) {
    $needs_update = $needs_update || $event->field_event_documents[LANGUAGE_NONE] != $current_documents;
  }

  if ($needs_update) {
    $event = node_submit($event);
    node_save($event);

    ev_migrate_log('Events saved with id ' . $event->nid);
  }
  else {
    ev_migrate_log('No need to save event with id ' . $event->nid);
  }

}

/**
 * Implements hook_node_presave().
 */
function ev_migrate_node_presave($node) {
  if (isset($node->ev_migrate_changed)) {
    $node->changed = $node->ev_migrate_changed;
    $node->timestamp = $node->ev_migrate_changed;
  }
  if (isset($node->ev_migrate_created)) {
    $node->created = $node->ev_migrate_created;
  }
}

/**
 * Load a term.
 */
function ev_migrate_get_term($name, $vocabulary) {
  // Query by name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->entityCondition('bundle', $vocabulary, '=');
  $query->propertyCondition('name', $name, '=');
  $result = $query->execute();

  // Make sure term exists.
  if (!isset($result['taxonomy_term'])) {
    return FALSE;
  }

  $term_tid = reset($result['taxonomy_term']);
  $term = taxonomy_term_load($term_tid->tid);
  return $term;
}

/**
 * Fetch and save a remote file.
 */
function ev_migrate_fetch_and_save_file($filename, $url, $timestamp) {
  $fid = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('filename', $filename)
    ->range(0, 1)
    ->execute()->fetchField();

  if (variable_get('ev_migrate_file_authentication_hrinfo', '')) {
    $url = str_replace('https://', 'https://' . variable_get('ev_migrate_file_authentication_hrinfo', '') . '@', $url);
  }

  if (!$fid) {
    $field_info = field_info_field('field_document_file');
    $instance = field_info_instance('multifield', 'field_document_file', 'field_event_documents');

    $destination = file_stream_wrapper_uri_normalize($field_info['settings']['uri_scheme'] . '://' . $instance['settings']['file_directory'] . '/' . format_date($timestamp, 'custom', 'Y-m-d') . '/');
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $file = _ev_migrate_system_retrieve_file($url, $destination, TRUE, FILE_EXISTS_RENAME);
    if ($file) {
      return $file->fid;
    }
    else {
      ev_migrate_log('Unable to fetch ' . $url);
    }
  }
  else {
    return $fid;
  }

  return FALSE;
}

/**
 * Attempts to get a file using drupal_http_request and to store it locally.
 *
 * @see system_retrieve_file()
 */
function _ev_migrate_system_retrieve_file($url, $destination = NULL, $managed = FALSE, $replace = FILE_EXISTS_RENAME) {
  $parsed_url = parse_url($url);
  if (!isset($destination)) {
    $path = file_build_uri(drupal_basename($parsed_url['path']));
  }
  else {
    if (is_dir(drupal_realpath($destination))) {
      // Prevent URIs with triple slashes when glueing parts together.
      $path = str_replace('///', '//', "$destination/") . drupal_basename($parsed_url['path']);
    }
    else {
      $path = $destination;
    }
  }
  $result = drupal_http_request($url);
  if ($result->code != 200) {
    return FALSE;
  }
  $local = $managed ? file_save_data($result->data, $path, $replace) : file_unmanaged_save_data($result->data, $path, $replace);
  if (!$local) {
    drupal_set_message(t('@remote could not be saved to @path.', array('@remote' => $url, '@path' => $path)), 'error');
  }

  return $local;
}
