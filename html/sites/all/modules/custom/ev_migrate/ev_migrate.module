<?php
/**
 * @file
 * Code for Events migration.
 */

/**
 * Migrate events.
 */
function ev_migrate_events() {
  $page = variable_get('ev_migrate_page', 0);
  $api_url = variable_get('ev_migrate_api_url', '');
  $shared_secret = variable_get('ev_migrate_shared_secret', 'ThisIsMySecret');
  $timestamp = REQUEST_TIME;

  // Build hash.
  $hash = md5($shared_secret . '_' . $page . '_' . $timestamp);

  // Build URL;
  $url = $api_url;
  $url .= '/' . $page;
  $url .= '/' . $timestamp;
  $url .= '/' . $hash;

  // Get data.
  $request = drupal_http_request($url);
  if (isset($request->data)) {
    $data = drupal_json_decode($request->data);
    if (count($data)) {
      foreach ($data as $row) {
        ev_migrate_process_row($row);
      }
    }
  }

  variable_set('ev_migrate_page', $page + 1);
};

/**
 * Process event data.
 */
function ev_migrate_process_row($row) {
  if (function_exists('drush_log')) {
    drush_log('Migrating ' . $row['url']);
  }

  // Make sure we have a user.
  $account = user_load_by_mail($row['author']['email']);
  if (!$account) {
    // Check if there's a user by the same name.
    if (user_load_by_name(!empty($row['author']['name']) ? $row['author']['name'] : $row['author']['email'])) {
      $row['author']['name'] = !empty($row['author']['name']) ? $row['author']['name'] : $row['author']['email'];
      $row['author']['name'] .= '_' . REQUEST_TIME;
    }

    // Cleanup init.
    $row['author']['init'] = str_replace('oauthconnector_hid_oauth__', '', $row['author']['init']);
    if (empty($row['author']['init'])) {
      $row['author']['init'] = $row['author']['email'];
    }

    // Create user object.
    $account = array(
      'name' => !empty($row['author']['name']) ? $row['author']['name'] : $row['author']['email'],
      'mail' => $row['author']['email'],
      'status' => 1,
      'init' => $row['author']['init'],
      'language' => $row['author']['language'],
      'timezone' => $row['author']['timezone'],
    );
    $account = user_save(NULL, $account);

    // Save the HID association with hybridauth.
    $hdata = array(
      'provider' => 'HumanitarianId',
      'identifier' => $row['author']['init'],
    );
    _hybridauth_identity_save($hdata, $account->uid);
  }

  // Create a new event.
  $event = new stdClass();
  $event->type = 'ev_event';
  $event->status = 1;
  node_object_prepare($event);

  $event->language = 'en';
  $event->uid = $account->uid;
  $event->status = TRUE;
  $event->promote = FALSE;
  $event->comment = FALSE;
  $event->revision = TRUE;
  $event->log = 'Event imported from ' . $row['url'];

  $event->title = $row['title'];
  $event->created = $row['created'];
  $event->changed = $row['changed'];
  $event->ev_migrate_created = $event->created;
  $event->ev_migrate_changed = $event->changed;

  $event->field_event_date[LANGUAGE_NONE][] = $row['date'];

  if (isset($row['description'])) {
    $event->description[LANGUAGE_NONE][] = array(
      'value' => $row['description'],
      'format' => 'markdown',
    );
  }

  if (isset($row['address']) && isset($row['address']['locality'])) {
    $event->field_event_location_details[LANGUAGE_NONE][]['value'] = $row['address']['locality'];
  }

  if (isset($row['category']) && $category = ev_migrate_get_term($row['category'], 'ev_category')) {
    $event->field_event_category[LANGUAGE_NONE][]['tid'] = $category->tid;
  }

  if (isset($row['location']) && $location = ev_migrate_get_term($row['location'], 'ev_location')) {
    $event->field_event_location[LANGUAGE_NONE][]['tid'] = $location->tid;
  }

  if (isset($row['themes']) && is_array($row['themes'])) {
    foreach ($row['themes'] as $name) {
      if ($theme = ev_migrate_get_term($name, 'ev_theme')) {
        $event->field_event_theme[LANGUAGE_NONE][]['tid'] = $theme->tid;
      }
    }
  }

  if (isset($row['organizations']) && is_array($row['organizations'])) {
    foreach ($row['organizations'] as $name) {
      if ($organization = ev_migrate_get_term($name, 'ev_organization')) {
        $event->field_event_organization[LANGUAGE_NONE][]['tid'] = $organization->tid;
      }
    }
  }

  if (isset($row['disasters']) && is_array($row['disasters'])) {
    foreach ($row['disasters'] as $name) {
      if ($disaster = ev_migrate_get_term($name, 'ev_disaster')) {
        $event->field_event_disasters[LANGUAGE_NONE][]['tid'] = $disaster->tid;
      }
    }
  }

  if (isset($row['sectors']) && is_array($row['sectors'])) {
    foreach ($row['sectors'] as $name) {
      if ($sector = ev_migrate_get_term($name, 'ev_list')) {
        $event->field_event_cluster[LANGUAGE_NONE][]['tid'] = $sector->tid;
      }
    }
  }

  if (isset($row['bundles']) && is_array($row['bundles'])) {
    foreach ($row['bundles'] as $name) {
      if ($bundle = ev_migrate_get_term($name, 'ev_list')) {
        $event->field_event_cluster[LANGUAGE_NONE][]['tid'] = $bundle->tid;
      }
    }
  }

  if (isset($row['coordination_hubs']) && is_array($row['coordination_hubs'])) {
    foreach ($row['coordination_hubs'] as $name) {
      if ($coordination_hub = ev_migrate_get_term($name, 'ev_coordination_hub')) {
        $event->field_event_coordination_hub[LANGUAGE_NONE][]['tid'] = $coordination_hub->tid;
      }
    }
  }

  if (isset($row['event_meeting_minutes']) && is_array($row['event_meeting_minutes'])) {
    $meeting_minute_term_info = events_config_get_term('Meeting Minutes', 'ev_document_type');
    $meeting_minute_tid = $meeting_minute_term_info['term']->tid;
    foreach ($row['event_meeting_minutes'] as $event_meeting_minute) {
      $fid = ev_migrate_fetch_and_save_file($event_meeting_minute['name'], $event_meeting_minute['url'], $event->created);
      if ($fid) {
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_type'][LANGUAGE_NONE][0]['tid'] = $meeting_minute_tid;
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_file'][LANGUAGE_NONE][0] = array(
          'fid' => $fid,
          'display' => 1,
          'description' => $event_meeting_minute['name'],
        );
      }
    }
  }

  if (isset($row['event_agenda']) && is_array($row['event_agenda'])) {
    $meeting_minute_term_info = events_config_get_term('Agenda', 'ev_document_type');
    $meeting_minute_tid = $meeting_minute_term_info['term']->tid;
    foreach ($row['event_agenda'] as $event_meeting_minute) {
      $fid = ev_migrate_fetch_and_save_file($event_meeting_minute['name'], $event_meeting_minute['url'], $event->created);
      if ($fid) {
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_type'][LANGUAGE_NONE][0]['tid'] = $meeting_minute_tid;
        $event->field_event_documents[LANGUAGE_NONE][0]['field_document_file'][LANGUAGE_NONE][0] = array(
          'fid' => $fid,
          'display' => 1,
          'description' => $event_meeting_minute['name'],
        );
      }
    }
  }

  $event = node_submit($event);
  node_save($event);
}

/**
 * Implements hook_node_presave().
 */
function ev_migrate_node_presave($node) {
  if (isset($node->ev_migrate_changed)) {
    $node->changed = $node->ev_migrate_changed;
    $node->timestamp = $node->ev_migrate_changed;
  }
  if (isset($node->ev_migrate_created)) {
    $node->created = $node->ev_migrate_created;
  }
}

/**
 * Load a term.
 */
function ev_migrate_get_term($name, $vocabulary) {
  // Query by name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->entityCondition('bundle', $vocabulary, '=');
  $query->propertyCondition('name', '%' . $name . '%', 'LIKE');
  $result = $query->execute();

  // Make sure term exists.
  if (!isset($result['taxonomy_term'])) {
    return FALSE;
  }

  $term_tid = reset($result['taxonomy_term']);
  $term = taxonomy_term_load($term_tid->tid);
  return $term;
}

/**
 * Fetch and save a remote file.
 */
function ev_migrate_fetch_and_save_file($filename, $url, $timestamp) {
  $fid = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('filename', $filename)
    ->range(0, 1)
    ->execute()->fetchField();

  if (variable_get('ev_migrate_file_authentication', '')) {
    $url = str_replace('https://', 'https://' . variable_get('ev_migrate_file_authentication', '') . '@', $url);
  }

  if (!$fid) {
    $field_info = field_info_field('field_document_file');
    $instance = field_info_instance('multifield', 'field_document_file', 'field_event_documents');

    $destination = file_stream_wrapper_uri_normalize($field_info['settings']['uri_scheme'] . '://' . $instance['settings']['file_directory'] . '/' . format_date($timestamp, 'custom', 'Y-m-d') . '/');
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $file = system_retrieve_file($url, $destination, TRUE, FILE_EXISTS_RENAME);
    if ($file) {
      return $file->fid;
    }
    else {
      if (function_exists('drush_log')) {
        drush_log('Unable to fetch ' . $url);
      }
    }
  }
  else {
    return $fid;
  }

  return FALSE;
}
