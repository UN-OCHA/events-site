<?php

/**
 * @file
 * Code for the Event feature.
 */

 /**
  * Implements hook_schema().
  */
function events_event_schema() {
  $schema['events_event_data'] = array(
    'description' => 'Stores event data for API.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Node ID.',
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of event info.',
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function events_event_install() {
  theme_enable(array('ochabasic'));
}

/**
 * Revert event feature.
 */
function events_event_update_7001() {
  features_revert_module('events_event');
}

/**
 * Add full name to location terms.
 */
function events_event_update_7002() {
  $vid = taxonomy_vocabulary_machine_name_load('ev_location')->vid;
  $tree = taxonomy_get_tree($vid);
  foreach ($tree as $term_info) {
    if (function_exists('drush_log')) {
      drush_log('Processing ' . $term_info->name);
    }
    $term = taxonomy_term_load($term_info->tid);
    taxonomy_term_save($term);
  }
}

/**
 * Revert event feature.
 */
function events_event_update_7003() {
  features_revert_module('events_event');
}

/**
 * Add parent tids to location terms.
 */
function events_event_update_7004() {
  $vid = taxonomy_vocabulary_machine_name_load('ev_location')->vid;
  $tree = taxonomy_get_tree($vid);
  foreach ($tree as $term_info) {
    if (function_exists('drush_log')) {
      drush_log('Processing ' . $term_info->name);
    }
    $term = taxonomy_term_load($term_info->tid);
    taxonomy_term_save($term);
  }
}

/**
 * Add new table.
 */
function events_event_update_7005() {
  if (!db_table_exists('events_event_data')) {
    db_create_table('events_event_data', drupal_get_schema_unprocessed('events_event', 'events_event_data'));
  }
}

/**
 * Update location terms.
 */
function events_event_update_7006() {
  events_event_update_7002();
  events_event_update_7004();
}

/**
 * Lock search api server.
 */
function events_event_update_7007() {
  // Not needed anymore.
}

/**
 * Unlock search api server.
 */
function events_event_update_7008() {
  features_feature_unlock('events_event', 'search_api_server');
}

/**
 * Migrate hrinfo_nid to field_event_external_id.
 */
function events_event_update_7009() {
  if (!field_info_field('field_event_external_id')) {
    field_create_field(array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
        'entity_translation_sync' => FALSE,
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_event_external_id' => array(
                'value' => 'field_event_external_id_value',
                'format' => 'field_event_external_id_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_event_external_id' => array(
                'value' => 'field_event_external_id_value',
                'format' => 'field_event_external_id_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          'format',
        ),
      ),
      'field_name' => 'field_event_external_id',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'ev_event',
        ),
      ),
    ));
  }

  $extra_bundles = array(
    'ev_event',
  );
  $instances = field_info_instances();
  foreach ($extra_bundles as $bundle) {
    if (empty($instances['node'][$bundle]['field_event_external_id'])) {
      field_create_instance(array(
        'label' => 'External Id',
        'widget' => array(
          'weight' => '14',
          'type' => 'field_extrawidgets_read_only',
          'module' => 'field_extrawidgets',
          'active' => 1,
          'settings' => array(
            'size' => '60',
            'formatter' => '',
            'formatter_settings' => array(),
            'display_empty' => 0,
          ),
        ),
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
          'entity_translation_sync' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'text_default',
            'settings' => array(),
            'module' => 'text',
            'weight' => 26,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
        'required' => 0,
        'description' => '',
        'ds_extras_field_template' => '',
        'default_value' => NULL,
        'field_name' => 'field_event_external_id',
        'entity_type' => 'node',
        'bundle' => $bundle,
        'deleted' => '0',
      ));
    }
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'ev_event', '=');
  $query->fieldCondition('field_event_hrinfo_nid', 'value', 0, '!=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $events = node_load_multiple($nids);
    foreach ($events as $event) {
      $event->field_event_external_id[LANGUAGE_NONE][0]['value'] = 'hrinfo-' . $event->field_event_hrinfo_nid[LANGUAGE_NONE][0]['value'];
      $event->do_not_send_email = TRUE;
      node_save($event);
    }
  }
}
