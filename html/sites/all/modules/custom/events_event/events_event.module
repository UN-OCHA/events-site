<?php
/**
 * @file
 * Code for the Event feature.
 */

include_once 'events_event.features.inc';

/**
 * Implements hook_menu().
 */
function events_event_menu() {
  $items['calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'events_event_calendar',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['api/v0/fetch-events'] = array(
    'title' => 'Fetch events',
    'page callback' => 'events_event_fetch_events',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['api/v0/organisations'] = array(
    'title' => 'Fetch organisations',
    'page callback' => 'events_event_fetch_organisations',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['api/v0/clusters'] = array(
    'title' => 'Fetch clusters',
    'page callback' => 'events_event_fetch_clusters',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback for calendar.
 */
function events_event_calendar() {
  $settings = array(
    'header' => array(
      'left' => 'prev,next today',
      'center' => 'title',
      'right' => 'month,agendaWeek,agendaDay,listYear',
    ),
    'editable' => FALSE,
    'eventLimit' => TRUE,
    'firstDay' => 1,
    'weekends' => TRUE,
    'events' => array(
      'url' => 'api/v0/fetch-events',
      'type' => 'GET',
      'data' => array(
        'field_event_organization' => '',
        'field_event_cluster' => '',
      ),
    ),
  );

  drupal_add_library('chosen', 'drupal.chosen');
  drupal_add_js(drupal_get_path('module', 'events_event') . '/events_event.js');

  return theme('fullcalendar_calendar', array(
    'calendar_id' => 'fullcalendar',
    'calendar_settings' => $settings,
  ));
}

/**
 * Page callback for events.
 */
function events_event_fetch_events() {
  $start = (isset($_GET['start']) && !empty($_GET['start'])) ? strtotime($_GET['start']) : strtotime('first day of this month', time());
  $end = (isset($_GET['end']) && !empty($_GET['end'])) ? strtotime($_GET['end']) : strtotime('last day of this month', time());
  if ($start > $end) {
    header("HTTP/1.1 400 Start date has to be smaller than end date.", TRUE, 400);
    module_invoke_all('exit');
    exit();
  }

  $organisation = isset($_GET['field_event_organization']) ? $_GET['field_event_organization'] : '';
  if (!empty($organisation)) {
    if (!is_int($organisation)) {
      header("HTTP/1.1 400 field_event_organization is an integer.", TRUE, 400);
      module_invoke_all('exit');
      exit();
    }
  }

  $cluster = isset($_GET['field_event_cluster']) ? $_GET['field_event_cluster'] : '';
  if (!empty($cluster)) {
    if (!is_int($cluster)) {
      header("HTTP/1.1 400 field_event_cluster is an integer.", TRUE, 400);
      module_invoke_all('exit');
      exit();
    }
  }

  $index = search_api_index_load("un_events");
  $query = new SearchApiQuery($index);

  $filter = $query->createFilter('AND');
  $filter->condition('field_event_date:value', $start, '>=');
  $filter->condition('field_event_date:value', $end, '<=');
  if ($organisation) {
    $filter->condition('field_event_organization', $organisation);
  }
  if ($cluster) {
    $filter->condition('field_event_cluster', $cluster);
  }

  $query->filter($filter);
  // Fetch results.
  $results = $query->execute()['results'];
  $nids = array_keys($results);
  $nodes = node_load_multiple($nids);
  $events = array();
  foreach ($nodes as $node) {
    foreach ($node->field_event_date['und'] as $date) {
      $events[] = array(
        'id' => $node->nid,
        'title' => $node->title,
        'start' => $date['value'],
        'end' => $date['value2'],
        'allDay' => $date['value'] == $date['value2'],
        'url' => url('node/' . $node->nid),
        'backgroundColor' => events_event_get_event_color($node),
        'field_event_organization' => isset($node->field_event_organization['und'][0]['tid']) ? $node->field_event_organization['und'][0]['tid'] : '',
        'field_event_cluster' => isset($node->field_event_cluster['und'][0]['tid']) ? $node->field_event_cluster['und'][0]['tid'] : '',

      );
    }
  }

  drupal_json_output($events);
}

/**
 * Page callback for organisations.
 */
function events_event_fetch_organisations() {
  $cache_key = 'events_event:organisations';

  $cache = cache_get($cache_id);
  if ($cache && !empty($cache->data)) {
    drupal_json_output($cache->data);
  }

  $organisations = array();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'ev_organization')
    ->execute();

  if (isset($result['taxonomy_term']))  {
    $tids = array_keys($result['taxonomy_term']);
    $terms = taxonomy_term_load_multiple($tids);
    foreach ($terms as $term) {
      $organisations[] = array(
        'tid' => $term->tid,
        'name' => $term->name,
      );
    }
  }

  cache_set($cache_key, $organisations);
  drupal_json_output($organisations);
}

/**
 * Page callback for clusters.
 */
function events_event_fetch_clusters() {
  $cache_key = 'events_event:clusters';

  $cache = cache_get($cache_id);
  if ($cache && !empty($cache->data)) {
    drupal_json_output($cache->data);
  }

  $clusters = array();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'ev_list')
    ->execute();

  if (isset($result['taxonomy_term']))  {
    $tids = array_keys($result['taxonomy_term']);
    $terms = taxonomy_term_load_multiple($tids);
    foreach ($terms as $term) {
      $clusters[] = array(
        'tid' => $term->tid,
        'name' => $term->name,
      );
    }
  }

  cache_set($cache_key, $clusters);
  drupal_json_output($clusters);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function events_event_taxonomy_term_update($term) {
  if (isset($term->vocabulary_machine_name)) {
    switch ($term->vocabulary_machine_name) {
      case 'ev_organization':
        cache_clear_all('events_event:organisations');
        break;

      case 'ev_list':
        cache_clear_all('events_event:clusters');
        break;

    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function events_event_taxonomy_term_insert($term) {
  events_event_hook_taxonomy_term_update($term);
}

/**
 * Create a stripe based on a taxonomy term.
 */
function events_event_get_event_color($node) {
  $term_field_name = 'field_event_organization';
  if ($terms_for_entity = field_get_items('node', $node, $term_field_name)) {
    foreach ($terms_for_entity as $delta => $item) {
      $term_for_entity = taxonomy_term_load($item['tid']);
      if ($term_for_entity) {
        if (isset($term_for_entity->field_ev_legend_color['und'][0]['rgb'])) {
          return $term_for_entity->field_ev_legend_color['und'][0]['rgb'];
        }
        else {
          return sprintf('#%06X', mt_rand(0, 0xFFFFFF));
        }
      }
    }
  }
}

/**
 * Implements hook_js_alter().
 */
function events_event_js_alter(&$javascript) {
  // Remove fullcalendar javascript.
  if (isset($javascript['sites/all/modules/contrib/fullcalendar_api/fullcalendar_calendar.js'])) {
    unset($javascript['sites/all/modules/contrib/fullcalendar_api/fullcalendar_calendar.js']);
  }
}
